
diagram {
  UeRrc -> LteUeComponentCarrierManager [label="ReportBufferStatus ()"];
            LteUeComponentCarrierManager -> LteUeMac0 [label="ReportBufferStatus ()"];
			 LteUeMac0 -> LteEnbMac0 [label="ReceiveBsrMessage ()"];
                         LteEnbMac0 -> LteEnbComponentCarrierManager [label="UlReceiveMacCe ()"];
                         LteEnbMac1 <- LteEnbComponentCarrierManager [label="ReportMacCeToScheduler ()"];
                         LteEnbMac0 <- LteEnbComponentCarrierManager [label="ReportMacCeToScheduler ()"];
	                 LteEnbMac0 -> Scheduler0[label="RlcBufferStatusReport ()"];
	                 LteEnbMac1 -> Scheduler1[label="RlcBufferStatusReport ()"];
                         LteEnbMac0 <- Scheduler0 [label="NotifyTxOpportunity ()"];
                         LteEnbMac1 <- Scheduler1 [label="NotifyTxOpportunity ()"];
                         LteUeMac1 <- LteEnbMac1 [label="NotifyTxOpportunity ()"];
                         LteUeMac0 <- LteEnbMac0 [label="NotifyTxOpportunity ()"];
                         LteUeComponentCarrierManager <- LteUeMac0 [label="NotifyTxOpportunity ()"];
			 UeRrc <- LteUeComponentCarrierManager[label="NotifyTxOpportunity ()"];
 			 UeRrc -> LteUeComponentCarrierManager[label="TransmitPdu ()"];
			 LteUeComponentCarrierManager -> LteUeMac0 [label="TransmitPdu ()"];
                         LteUeComponentCarrierManager <- LteUeMac1 [label="NotifyTxOpportunity ()"];
			 UeRrc <- LteUeComponentCarrierManager[label="NotifyTxOpportunity ()"];
 			 UeRrc -> LteUeComponentCarrierManager[label="TransmitPdu ()"];
			 LteUeComponentCarrierManager -> LteUeMac1 [label="TransmitPdu ()"];

  }

